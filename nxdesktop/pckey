/* This file generated automatically by xkbcomp */
/* DO  NOT EDIT */
#ifndef PCKEY
#define PCKEY 1

#ifndef XKB_IN_SERVER
#define GET_ATOM(d,s)	XInternAtom(d,s,0)
#define DPYTYPE	Display *
#else
#define GET_ATOM(d,s)	MakeAtom(s,strlen(s),1)
#define DPYTYPE	char *
#endif
#define NUM_KEYS	256

#define	vmod_NumLock	0
#define	vmod_Alt	1
#define	vmod_LevelThree	2
#define	vmod_AltGr	3
#define	vmod_ScrollLock	4

#define	vmod_NumLockMask	(1<<0)
#define	vmod_AltMask	(1<<1)
#define	vmod_LevelThreeMask	(1<<2)
#define	vmod_AltGrMask	(1<<3)
#define	vmod_ScrollLockMask	(1<<4)

/* keycodes name is "xfree86+aliases(qwerty)" */
static XkbKeyNameRec	keyNames[NUM_KEYS]= {
    {      ""  },    {      ""  },    {      ""  },    {      ""  },
    {      ""  },    {      ""  },    {      ""  },    {      ""  },
    {      ""  },    {   "ESC"  },    {  "AE01"  },    {  "AE02"  },
    {  "AE03"  },    {  "AE04"  },    {  "AE05"  },    {  "AE06"  },
    {  "AE07"  },    {  "AE08"  },    {  "AE09"  },    {  "AE10"  },
    {  "AE11"  },    {  "AE12"  },    {  "BKSP"  },    {   "TAB"  },
    {  "AD01"  },    {  "AD02"  },    {  "AD03"  },    {  "AD04"  },
    {  "AD05"  },    {  "AD06"  },    {  "AD07"  },    {  "AD08"  },
    {  "AD09"  },    {  "AD10"  },    {  "AD11"  },    {  "AD12"  },
    {  "RTRN"  },    {  "LCTL"  },    {  "AC01"  },    {  "AC02"  },
    {  "AC03"  },    {  "AC04"  },    {  "AC05"  },    {  "AC06"  },
    {  "AC07"  },    {  "AC08"  },    {  "AC09"  },    {  "AC10"  },
    {  "AC11"  },    {  "TLDE"  },    {  "LFSH"  },    {  "BKSL"  },
    {  "AB01"  },    {  "AB02"  },    {  "AB03"  },    {  "AB04"  },
    {  "AB05"  },    {  "AB06"  },    {  "AB07"  },    {  "AB08"  },
    {  "AB09"  },    {  "AB10"  },    {  "RTSH"  },    {  "KPMU"  },
    {  "LALT"  },    {  "SPCE"  },    {  "CAPS"  },    {  "FK01"  },
    {  "FK02"  },    {  "FK03"  },    {  "FK04"  },    {  "FK05"  },
    {  "FK06"  },    {  "FK07"  },    {  "FK08"  },    {  "FK09"  },
    {  "FK10"  },    {  "NMLK"  },    {  "SCLK"  },    {   "KP7"  },
    {   "KP8"  },    {   "KP9"  },    {  "KPSU"  },    {   "KP4"  },
    {   "KP5"  },    {   "KP6"  },    {  "KPAD"  },    {   "KP1"  },
    {   "KP2"  },    {   "KP3"  },    {   "KP0"  },    {  "KPDL"  },
    {  "SYRQ"  },    {      ""  },    {  "LSGT"  },    {  "FK11"  },
    {  "FK12"  },    {  "HOME"  },    {    "UP"  },    {  "PGUP"  },
    {  "LEFT"  },    {      ""  },    {  "RGHT"  },    {   "END"  },
    {  "DOWN"  },    {  "PGDN"  },    {   "INS"  },    {  "DELE"  },
    {  "KPEN"  },    {  "RCTL"  },    {  "PAUS"  },    {  "PRSC"  },
    {  "KPDV"  },    {  "RALT"  },    {   "BRK"  },    {  "LWIN"  },
    {  "RWIN"  },    {  "MENU"  },    {  "FK13"  },    {  "FK14"  },
    {  "FK15"  },    {  "FK16"  },    {  "FK17"  },    {  "KPDC"  },
    {      ""  },    {      ""  },    {      ""  },    {      ""  },
    {      ""  },    {  "XFER"  },    {   "I02"  },    {  "NFER"  },
    {   "I04"  },    {  "AE13"  },    {   "I06"  },    {   "I07"  },
    {   "I08"  },    {   "I09"  },    {   "I0A"  },    {   "I0B"  },
    {   "I0C"  },    {   "I0D"  },    {   "I0E"  },    {   "I0F"  },
    {   "I10"  },    {   "I11"  },    {   "I12"  },    {   "I13"  },
    {   "I14"  },    {   "I15"  },    {   "I16"  },    {   "I17"  },
    {   "I18"  },    {   "I19"  },    {   "I1A"  },    {   "I1B"  },
    {      ""  },    {      ""  },    {   "I1E"  },    {   "I1F"  },
    {   "I20"  },    {   "I21"  },    {   "I22"  },    {   "I23"  },
    {   "I24"  },    {   "I25"  },    {   "I26"  },    {   "I27"  },
    {   "I28"  },    {   "I29"  },    {      ""  },    {   "I2B"  },
    {   "I2C"  },    {   "I2D"  },    {   "I2E"  },    {   "I2F"  },
    {   "I30"  },    {   "I31"  },    {   "I32"  },    {   "I33"  },
    {   "I34"  },    {      ""  },    {      ""  },    {      ""  },
    {      ""  },    {   "I39"  },    {   "I3A"  },    {   "I3B"  },
    {   "I3C"  },    {      ""  },    {      ""  },    {      ""  },
    {      ""  },    {      ""  },    {   "I42"  },    {   "I43"  },
    {   "I44"  },    {   "I45"  },    {      ""  },    {      ""  },
    {      ""  },    {      ""  },    {   "I4A"  },    {      ""  },
    {      ""  },    {      ""  },    {      ""  },    {      ""  },
    {      ""  },    {      ""  },    {      ""  },    {      ""  },
    {   "I54"  },    {   "I55"  },    {   "I56"  },    {   "I57"  },
    {   "I58"  },    {   "I59"  },    {   "I5A"  },    {      ""  },
    {      ""  },    {      ""  },    {   "I5E"  },    {   "I5F"  },
    {   "I60"  },    {   "I61"  },    {   "I62"  },    {   "I63"  },
    {   "I64"  },    {   "I65"  },    {   "I66"  },    {   "I67"  },
    {   "I68"  },    {   "I69"  },    {   "I6A"  },    {   "I6B"  },
    {   "I6C"  },    {   "I6D"  },    {   "I6E"  },    {   "I6F"  },
    {   "I70"  },    {   "I71"  },    {   "I72"  },    {   "I73"  },
    {   "I74"  },    {   "I75"  },    {   "I76"  },    {   "I77"  },
    {   "I78"  },    {   "I79"  },    {   "I7A"  },    {   "I7B"  },
    {   "I7C"  },    {   "I7D"  },    {   "I7E"  },    {   "I7F"  }
};
/* types name is "complete" */
static Atom lnames_ONE_LEVEL[1];

static XkbKTMapEntryRec map_TWO_LEVEL[1]= {
    { 1,      1, {       ShiftMask,       ShiftMask,               0 } }
};
static Atom lnames_TWO_LEVEL[2];

static XkbKTMapEntryRec map_ALPHABETIC[2]= {
    { 1,      1, {       ShiftMask,       ShiftMask,               0 } },
    { 1,      0, {        LockMask,        LockMask,               0 } }
};
static XkbModsRec preserve_ALPHABETIC[2]= {
    {                 0,               0,               0 },
    {          LockMask,        LockMask,               0 }
};
static Atom lnames_ALPHABETIC[2];

static XkbKTMapEntryRec map_KEYPAD[2]= {
    { 1,      1, {       ShiftMask,       ShiftMask,               0 } },
    { 1,      1, {        Mod2Mask,               0, vmod_NumLockMask } }
};
static Atom lnames_KEYPAD[2];

static XkbKTMapEntryRec map_SHIFT_ALT[1]= {
    { 1,      1, { ShiftMask|Mod1Mask,       ShiftMask,    vmod_AltMask } }
};
static Atom lnames_SHIFT_ALT[2];

static XkbKTMapEntryRec map_PC_BREAK[1]= {
    { 1,      1, {     ControlMask,     ControlMask,               0 } }
};
static Atom lnames_PC_BREAK[2];

static XkbKTMapEntryRec map_PC_SYSRQ[1]= {
    { 1,      1, {        Mod1Mask,               0,    vmod_AltMask } }
};
static Atom lnames_PC_SYSRQ[2];

static XkbKTMapEntryRec map_CTRL_ALT[1]= {
    { 1,      1, { ControlMask|Mod1Mask,     ControlMask,    vmod_AltMask } }
};
static Atom lnames_CTRL_ALT[2];

static XkbKTMapEntryRec map_THREE_LEVEL[3]= {
    { 1,      1, {       ShiftMask,       ShiftMask,               0 } },
    { 1,      2, {        Mod5Mask,               0, vmod_LevelThreeMask } },
    { 1,      2, { ShiftMask|Mod5Mask,       ShiftMask, vmod_LevelThreeMask } }
};
static Atom lnames_THREE_LEVEL[3];

static XkbKTMapEntryRec map_FOUR_LEVEL[3]= {
    { 1,      1, {       ShiftMask,       ShiftMask,               0 } },
    { 1,      2, {        Mod5Mask,               0, vmod_LevelThreeMask } },
    { 1,      3, { ShiftMask|Mod5Mask,       ShiftMask, vmod_LevelThreeMask } }
};
static Atom lnames_FOUR_LEVEL[4];

static XkbKTMapEntryRec map_FOUR_LEVEL_ALPHABETIC[6]= {
    { 1,      1, {       ShiftMask,       ShiftMask,               0 } },
    { 1,      2, {        Mod5Mask,               0, vmod_LevelThreeMask } },
    { 1,      3, { ShiftMask|Mod5Mask,       ShiftMask, vmod_LevelThreeMask } },
    { 1,      2, { LockMask|Mod5Mask,        LockMask, vmod_LevelThreeMask } },
    { 1,      2, { ShiftMask|LockMask|Mod5Mask, ShiftMask|LockMask, vmod_LevelThreeMask } },
    { 1,      0, {        LockMask,        LockMask,               0 } }
};
static XkbModsRec preserve_FOUR_LEVEL_ALPHABETIC[6]= {
    {                 0,               0,               0 },
    {                 0,               0,               0 },
    {                 0,               0,               0 },
    {          LockMask,        LockMask,               0 },
    {                 0,               0,               0 },
    {          LockMask,        LockMask,               0 }
};
static Atom lnames_FOUR_LEVEL_ALPHABETIC[4];

static XkbKTMapEntryRec map_FOUR_LEVEL_KEYPAD[6]= {
    { 1,      1, {       ShiftMask,       ShiftMask,               0 } },
    { 1,      1, {        Mod2Mask,               0, vmod_NumLockMask } },
    { 1,      2, {        Mod5Mask,               0, vmod_LevelThreeMask } },
    { 1,      3, { ShiftMask|Mod5Mask,       ShiftMask, vmod_LevelThreeMask } },
    { 1,      3, { Mod2Mask|Mod5Mask,               0, vmod_NumLockMask|vmod_LevelThreeMask } },
    { 1,      2, { ShiftMask|Mod2Mask|Mod5Mask,       ShiftMask, vmod_NumLockMask|vmod_LevelThreeMask } }
};
static Atom lnames_FOUR_LEVEL_KEYPAD[4];

static XkbKeyTypeRec dflt_types[]= {
    {
	{               0,               0,               0 },
	1,
	0,	NULL,	NULL,
	None,	lnames_ONE_LEVEL
    },
    {
	{       ShiftMask,       ShiftMask,               0 },
	2,
	1,	map_TWO_LEVEL,	NULL,
	None,	lnames_TWO_LEVEL
    },
    {
	{ ShiftMask|LockMask, ShiftMask|LockMask,               0 },
	2,
	2,	map_ALPHABETIC,	preserve_ALPHABETIC,
	None,	lnames_ALPHABETIC
    },
    {
	{ ShiftMask|Mod2Mask,       ShiftMask, vmod_NumLockMask },
	2,
	2,	map_KEYPAD,	NULL,
	None,	lnames_KEYPAD
    },
    {
	{ ShiftMask|Mod1Mask,       ShiftMask,    vmod_AltMask },
	2,
	1,	map_SHIFT_ALT,	NULL,
	None,	lnames_SHIFT_ALT
    },
    {
	{     ControlMask,     ControlMask,               0 },
	2,
	1,	map_PC_BREAK,	NULL,
	None,	lnames_PC_BREAK
    },
    {
	{        Mod1Mask,               0,    vmod_AltMask },
	2,
	1,	map_PC_SYSRQ,	NULL,
	None,	lnames_PC_SYSRQ
    },
    {
	{ ControlMask|Mod1Mask,     ControlMask,    vmod_AltMask },
	2,
	1,	map_CTRL_ALT,	NULL,
	None,	lnames_CTRL_ALT
    },
    {
	{ ShiftMask|Mod5Mask,       ShiftMask, vmod_LevelThreeMask },
	3,
	3,	map_THREE_LEVEL,	NULL,
	None,	lnames_THREE_LEVEL
    },
    {
	{ ShiftMask|Mod5Mask,       ShiftMask, vmod_LevelThreeMask },
	4,
	3,	map_FOUR_LEVEL,	NULL,
	None,	lnames_FOUR_LEVEL
    },
    {
	{ ShiftMask|LockMask|Mod5Mask, ShiftMask|LockMask, vmod_LevelThreeMask },
	4,
	6,	map_FOUR_LEVEL_ALPHABETIC,	preserve_FOUR_LEVEL_ALPHABETIC,
	None,	lnames_FOUR_LEVEL_ALPHABETIC
    },
    {
	{ ShiftMask|Mod2Mask|Mod5Mask,       ShiftMask, vmod_NumLockMask|vmod_LevelThreeMask },
	4,
	6,	map_FOUR_LEVEL_KEYPAD,	NULL,
	None,	lnames_FOUR_LEVEL_KEYPAD
    }
};
#define num_dflt_types (sizeof(dflt_types)/sizeof(XkbKeyTypeRec))


static void
#if NeedFunctionPrototypes
initTypeNames(DPYTYPE dpy)
#else
initTypeNames(dpy)
DPYTYPE dpy;
#endif
{
    dflt_types[0].name= GET_ATOM(dpy,"ONE_LEVEL");
    lnames_ONE_LEVEL[0]=	GET_ATOM(dpy,"Any");
    dflt_types[1].name= GET_ATOM(dpy,"TWO_LEVEL");
    lnames_TWO_LEVEL[0]=	GET_ATOM(dpy,"Base");
    lnames_TWO_LEVEL[1]=	GET_ATOM(dpy,"Shift");
    dflt_types[2].name= GET_ATOM(dpy,"ALPHABETIC");
    lnames_ALPHABETIC[0]=	GET_ATOM(dpy,"Base");
    lnames_ALPHABETIC[1]=	GET_ATOM(dpy,"Caps");
    dflt_types[3].name= GET_ATOM(dpy,"KEYPAD");
    lnames_KEYPAD[0]=	GET_ATOM(dpy,"Base");
    lnames_KEYPAD[1]=	GET_ATOM(dpy,"Number");
    dflt_types[4].name= GET_ATOM(dpy,"SHIFT_ALT");
    lnames_SHIFT_ALT[0]=	GET_ATOM(dpy,"Base");
    lnames_SHIFT_ALT[1]=	GET_ATOM(dpy,"Shift_Alt");
    dflt_types[5].name= GET_ATOM(dpy,"PC_BREAK");
    lnames_PC_BREAK[0]=	GET_ATOM(dpy,"Base");
    lnames_PC_BREAK[1]=	GET_ATOM(dpy,"Control");
    dflt_types[6].name= GET_ATOM(dpy,"PC_SYSRQ");
    lnames_PC_SYSRQ[0]=	GET_ATOM(dpy,"Base");
    lnames_PC_SYSRQ[1]=	GET_ATOM(dpy,"Alt");
    dflt_types[7].name= GET_ATOM(dpy,"CTRL_ALT");
    lnames_CTRL_ALT[0]=	GET_ATOM(dpy,"Base");
    lnames_CTRL_ALT[1]=	GET_ATOM(dpy,"Ctrl_Alt");
    dflt_types[8].name= GET_ATOM(dpy,"THREE_LEVEL");
    lnames_THREE_LEVEL[0]=	GET_ATOM(dpy,"Base");
    lnames_THREE_LEVEL[1]=	GET_ATOM(dpy,"Shift");
    lnames_THREE_LEVEL[2]=	GET_ATOM(dpy,"Level3");
    dflt_types[9].name= GET_ATOM(dpy,"FOUR_LEVEL");
    lnames_FOUR_LEVEL[0]=	GET_ATOM(dpy,"Base");
    lnames_FOUR_LEVEL[1]=	GET_ATOM(dpy,"Shift");
    lnames_FOUR_LEVEL[2]=	GET_ATOM(dpy,"Alt_Base");
    lnames_FOUR_LEVEL[3]=	GET_ATOM(dpy,"Shift_Alt");
    dflt_types[10].name= GET_ATOM(dpy,"FOUR_LEVEL_ALPHABETIC");
    lnames_FOUR_LEVEL_ALPHABETIC[0]=	GET_ATOM(dpy,"Base");
    lnames_FOUR_LEVEL_ALPHABETIC[1]=	GET_ATOM(dpy,"Shift");
    lnames_FOUR_LEVEL_ALPHABETIC[2]=	GET_ATOM(dpy,"Alt_Base");
    lnames_FOUR_LEVEL_ALPHABETIC[3]=	GET_ATOM(dpy,"Shift_Alt");
    dflt_types[11].name= GET_ATOM(dpy,"FOUR_LEVEL_KEYPAD");
    lnames_FOUR_LEVEL_KEYPAD[0]=	GET_ATOM(dpy,"Base");
    lnames_FOUR_LEVEL_KEYPAD[1]=	GET_ATOM(dpy,"Number");
    lnames_FOUR_LEVEL_KEYPAD[2]=	GET_ATOM(dpy,"Alt_Base");
    lnames_FOUR_LEVEL_KEYPAD[3]=	GET_ATOM(dpy,"Alt_Number");
}
#define NUM_SYMBOLS	286
static KeySym	symCache[NUM_SYMBOLS]= {
           NoSymbol,       XK_Escape,            XK_1,       XK_exclam,
     XK_onesuperior,   XK_exclamdown,            XK_2,     XK_quotedbl,
     XK_twosuperior,    XK_oneeighth,            XK_3,     XK_sterling,
    XK_threesuperior,     XK_sterling,            XK_4,       XK_dollar,
      XK_onequarter,       XK_dollar,            XK_5,      XK_percent,
         XK_onehalf, XK_threeeighths,            XK_6,    XK_ampersand,
         XK_notsign,  XK_fiveeighths,            XK_7,        XK_slash,
       XK_braceleft, XK_seveneighths,            XK_8,    XK_parenleft,
     XK_bracketleft,    XK_trademark,            XK_9,   XK_parenright,
    XK_bracketright,    XK_plusminus,            XK_0,        XK_equal,
      XK_braceright,       XK_degree,   XK_apostrophe,     XK_question,
           XK_grave, XK_questiondown,       XK_igrave,  XK_asciicircum,
      XK_asciitilde,  XK_dead_ogonek,    XK_BackSpace, XK_Terminate_Server,
             XK_Tab, XK_ISO_Left_Tab,            XK_q,            XK_Q,
              XK_at,  XK_Greek_OMEGA,            XK_w,            XK_W,
         XK_lstroke,      XK_Lstroke,            XK_e,            XK_E,
        XK_EuroSign,         XK_cent,            XK_r,            XK_R,
       XK_paragraph,   XK_registered,            XK_t,            XK_T,
          XK_tslash,       XK_Tslash,            XK_y,            XK_Y,
       XK_leftarrow,          XK_yen,            XK_u,            XK_U,
       XK_downarrow,      XK_uparrow,            XK_i,            XK_I,
      XK_rightarrow,     XK_idotless,            XK_o,            XK_O,
          XK_oslash,     XK_Ooblique,            XK_p,            XK_P,
           XK_thorn,        XK_THORN,       XK_egrave,       XK_eacute,
     XK_bracketleft, XK_dead_abovering,         XK_plus,     XK_asterisk,
    XK_bracketright,  XK_dead_macron,       XK_Return,    XK_Control_L,
               XK_a,            XK_A,           XK_ae,           XK_AE,
               XK_s,            XK_S,       XK_ssharp,      XK_section,
               XK_d,            XK_D,          XK_eth,          XK_ETH,
               XK_f,            XK_F,      XK_dstroke,  XK_ordfeminine,
               XK_g,            XK_G,          XK_eng,          XK_ENG,
               XK_h,            XK_H,      XK_hstroke,      XK_Hstroke,
               XK_j,            XK_J,            XK_k,            XK_K,
             XK_kra,    XK_ampersand,            XK_l,            XK_L,
         XK_lstroke,      XK_Lstroke,       XK_ograve,     XK_ccedilla,
              XK_at, XK_dead_doubleacute,       XK_agrave,       XK_degree,
      XK_numbersign,   XK_numbersign,    XK_backslash,          XK_bar,
         XK_notsign,      XK_notsign,      XK_Shift_L,       XK_ugrave,
         XK_section,   XK_dead_grave,   XK_dead_breve,            XK_z,
               XK_Z, XK_guillemotleft,         XK_less,            XK_x,
               XK_X, XK_guillemotright,      XK_greater,            XK_c,
               XK_C,         XK_cent,    XK_copyright,            XK_v,
               XK_V, XK_leftdoublequotemark,        XK_grave,            XK_b,
               XK_B, XK_rightdoublequotemark,   XK_apostrophe,            XK_n,
               XK_N,            XK_m,            XK_M,           XK_mu,
       XK_masculine,        XK_comma,    XK_semicolon, XK_horizconnector,
        XK_multiply,       XK_period,        XK_colon, XK_periodcentered,
        XK_division,        XK_minus,   XK_underscore, XK_dead_belowdot,
    XK_dead_abovedot,      XK_Shift_R,  XK_KP_Multiply, XK_XF86_ClearGrab,
           XK_Alt_L,       XK_Meta_L,        XK_space,    XK_Caps_Lock,
              XK_F1, XK_XF86_Switch_VT_1,           XK_F2, XK_XF86_Switch_VT_2,
              XK_F3, XK_XF86_Switch_VT_3,           XK_F4, XK_XF86_Switch_VT_4,
              XK_F5, XK_XF86_Switch_VT_5,           XK_F6, XK_XF86_Switch_VT_6,
              XK_F7, XK_XF86_Switch_VT_7,           XK_F8, XK_XF86_Switch_VT_8,
              XK_F9, XK_XF86_Switch_VT_9,          XK_F10, XK_XF86_Switch_VT_10,
        XK_Num_Lock, XK_Pointer_EnableKeys,  XK_Scroll_Lock,      XK_KP_Home,
            XK_KP_7,        XK_KP_Up,         XK_KP_8,     XK_KP_Prior,
            XK_KP_9,  XK_KP_Subtract, XK_XF86_Prev_VMode,      XK_KP_Left,
            XK_KP_4,     XK_KP_Begin,         XK_KP_5,     XK_KP_Right,
            XK_KP_6,       XK_KP_Add, XK_XF86_Next_VMode,       XK_KP_End,
            XK_KP_1,      XK_KP_Down,         XK_KP_2,      XK_KP_Next,
            XK_KP_3,    XK_KP_Insert,         XK_KP_0,    XK_KP_Delete,
      XK_KP_Decimal,        XK_Print,      XK_Sys_Req,         XK_less,
         XK_greater,          XK_bar,    XK_brokenbar,          XK_F11,
    XK_XF86_Switch_VT_11,          XK_F12, XK_XF86_Switch_VT_12,         XK_Home,
              XK_Up,        XK_Prior,         XK_Left,        XK_Right,
             XK_End,         XK_Down,         XK_Next,       XK_Insert,
          XK_Delete,     XK_KP_Enter,    XK_Control_R,    XK_Multi_key,
           XK_Pause,        XK_Break,        XK_Print,      XK_Sys_Req,
       XK_KP_Divide,  XK_XF86_Ungrab, XK_ISO_Level3_Shift,    XK_Multi_key,
           XK_Pause,        XK_Break,      XK_Super_L,      XK_Super_R,
       XK_Multi_key,         XK_Menu
};
static XkbSymMapRec	symMap[NUM_KEYS]= {
    {  0, 0x0,   0 }, {  0, 0x0,   0 }, {  0, 0x0,   0 }, {  0, 0x0,   0 },
    {  0, 0x0,   0 }, {  0, 0x0,   0 }, {  0, 0x0,   0 }, {  0, 0x0,   0 },
    {  0, 0x0,   1 }, {  0, 0x1,   1 }, {  9, 0x1,   2 }, {  9, 0x1,   6 },
    {  9, 0x1,  10 }, {  9, 0x1,  14 }, {  9, 0x1,  18 }, {  9, 0x1,  22 },
    {  9, 0x1,  26 }, {  9, 0x1,  30 }, {  9, 0x1,  34 }, {  9, 0x1,  38 },
    {  9, 0x1,  42 }, {  9, 0x1,  46 }, {  7, 0x1,  50 }, {  1, 0x1,  52 },
    { 10, 0x1,  54 }, { 10, 0x1,  58 }, { 10, 0x1,  62 }, { 10, 0x1,  66 },
    { 10, 0x1,  70 }, { 10, 0x1,  74 }, { 10, 0x1,  78 }, { 10, 0x1,  82 },
    { 10, 0x1,  86 }, { 10, 0x1,  90 }, {  9, 0x1,  94 }, {  9, 0x1,  98 },
    {  0, 0x1, 102 }, {  0, 0x1, 103 }, { 10, 0x1, 104 }, { 10, 0x1, 108 },
    { 10, 0x1, 112 }, { 10, 0x1, 116 }, { 10, 0x1, 120 }, { 10, 0x1, 124 },
    {  2, 0x1, 128 }, { 10, 0x1, 130 }, { 10, 0x1, 134 }, {  9, 0x1, 138 },
    {  9, 0x1, 142 }, {  9, 0x1, 146 }, {  0, 0x1, 150 }, {  9, 0x1, 151 },
    { 10, 0x1, 155 }, { 10, 0x1, 159 }, { 10, 0x1, 163 }, { 10, 0x1, 167 },
    { 10, 0x1, 171 }, {  2, 0x1, 175 }, { 10, 0x1, 177 }, {  9, 0x1, 181 },
    {  9, 0x1, 185 }, {  9, 0x1, 189 }, {  0, 0x1, 193 }, {  7, 0x1, 194 },
    {  1, 0x1, 196 }, {  0, 0x1, 198 }, {  0, 0x1, 199 }, {  7, 0x1, 200 },
    {  7, 0x1, 202 }, {  7, 0x1, 204 }, {  7, 0x1, 206 }, {  7, 0x1, 208 },
    {  7, 0x1, 210 }, {  7, 0x1, 212 }, {  7, 0x1, 214 }, {  7, 0x1, 216 },
    {  7, 0x1, 218 }, {  1, 0x1, 220 }, {  0, 0x1, 222 }, {  3, 0x1, 223 },
    {  3, 0x1, 225 }, {  3, 0x1, 227 }, {  7, 0x1, 229 }, {  3, 0x1, 231 },
    {  3, 0x1, 233 }, {  3, 0x1, 235 }, {  7, 0x1, 237 }, {  3, 0x1, 239 },
    {  3, 0x1, 241 }, {  3, 0x1, 243 }, {  3, 0x1, 245 }, {  3, 0x1, 247 },
    {  6, 0x1, 249 }, {  0, 0x0, 251 }, {  9, 0x1, 251 }, {  7, 0x1, 255 },
    {  7, 0x1, 257 }, {  0, 0x1, 259 }, {  0, 0x1, 260 }, {  0, 0x1, 261 },
    {  0, 0x1, 262 }, {  0, 0x0, 263 }, {  0, 0x1, 263 }, {  0, 0x1, 264 },
    {  0, 0x1, 265 }, {  0, 0x1, 266 }, {  0, 0x1, 267 }, {  0, 0x1, 268 },
    {  0, 0x1, 269 }, {  1, 0x1, 270 }, {  5, 0x1, 272 }, {  6, 0x1, 274 },
    {  7, 0x1, 276 }, {  1, 0x1, 278 }, {  5, 0x1, 280 }, {  0, 0x1, 282 },
    {  1, 0x1, 283 }, {  0, 0x1, 285 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 },
    {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }, {  0, 0x0, 286 }
};
static XkbClientMapRec clientMap= {
    NUM_TYPES,   NUM_TYPES,   types, 
    NUM_SYMBOLS, NUM_SYMBOLS, symCache, symMap
};

#define NUM_ACTIONS	72
static XkbAnyAction 	actionCache[NUM_ACTIONS]= {
    {       XkbSA_NoAction, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {       XkbSA_NoAction, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {      XkbSA_Terminate, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {        XkbSA_SetMods, { 0x05, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00 } },
    {        XkbSA_SetMods, { 0x05, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00 } },
    {        XkbSA_SetMods, { 0x05, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00 } },
    {     XkbSA_SetPtrDflt, { 0x04, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00 } },
    {              Private, { 0x43, 0x6c, 0x73, 0x47, 0x72, 0x62, 0x00 } },
    {        XkbSA_SetMods, { 0x05, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00 } },
    {        XkbSA_SetMods, { 0x05, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00 } },
    {       XkbSA_LockMods, { 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00 } },
    {       XkbSA_NoAction, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {   XkbSA_SwitchScreen, { 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {       XkbSA_NoAction, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {   XkbSA_SwitchScreen, { 0x05, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {       XkbSA_NoAction, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {   XkbSA_SwitchScreen, { 0x05, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {       XkbSA_NoAction, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {   XkbSA_SwitchScreen, { 0x05, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {       XkbSA_NoAction, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {   XkbSA_SwitchScreen, { 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {       XkbSA_NoAction, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {   XkbSA_SwitchScreen, { 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {       XkbSA_NoAction, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {   XkbSA_SwitchScreen, { 0x05, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {       XkbSA_NoAction, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {   XkbSA_SwitchScreen, { 0x05, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {       XkbSA_NoAction, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {   XkbSA_SwitchScreen, { 0x05, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {       XkbSA_NoAction, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {   XkbSA_SwitchScreen, { 0x05, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {       XkbSA_LockMods, { 0x00, 0x10, 0x00, 0x00, 0x01, 0x00, 0x00 } },
    {   XkbSA_LockControls, { 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00 } },
    {        XkbSA_MovePtr, { 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00 } },
    {        XkbSA_MovePtr, { 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00 } },
    {        XkbSA_MovePtr, { 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00 } },
    {        XkbSA_MovePtr, { 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00 } },
    {        XkbSA_MovePtr, { 0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00 } },
    {        XkbSA_MovePtr, { 0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00 } },
    {     XkbSA_SetPtrDflt, { 0x04, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00 } },
    {              Private, { 0x2d, 0x56, 0x4d, 0x6f, 0x64, 0x65, 0x00 } },
    {        XkbSA_MovePtr, { 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 } },
    {        XkbSA_MovePtr, { 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 } },
    {         XkbSA_PtrBtn, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {         XkbSA_PtrBtn, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {        XkbSA_MovePtr, { 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00 } },
    {        XkbSA_MovePtr, { 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00 } },
    {         XkbSA_PtrBtn, { 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {              Private, { 0x2b, 0x56, 0x4d, 0x6f, 0x64, 0x65, 0x00 } },
    {        XkbSA_MovePtr, { 0x00, 0xff, 0xff, 0x00, 0x01, 0x00, 0x00 } },
    {        XkbSA_MovePtr, { 0x00, 0xff, 0xff, 0x00, 0x01, 0x00, 0x00 } },
    {        XkbSA_MovePtr, { 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00 } },
    {        XkbSA_MovePtr, { 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00 } },
    {        XkbSA_MovePtr, { 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00 } },
    {        XkbSA_MovePtr, { 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00 } },
    {     XkbSA_LockPtrBtn, { 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {     XkbSA_LockPtrBtn, { 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {     XkbSA_LockPtrBtn, { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {     XkbSA_LockPtrBtn, { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {       XkbSA_NoAction, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {   XkbSA_SwitchScreen, { 0x05, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {       XkbSA_NoAction, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {   XkbSA_SwitchScreen, { 0x05, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00 } },
    {        XkbSA_SetMods, { 0x05, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00 } },
    {        XkbSA_SetMods, { 0x05, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00 } },
    {     XkbSA_SetPtrDflt, { 0x04, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00 } },
    {              Private, { 0x55, 0x6e, 0x67, 0x72, 0x61, 0x62, 0x00 } },
    {        XkbSA_SetMods, { 0x01, 0x80, 0x00, 0x00, 0x04, 0x00, 0x00 } },
    {        XkbSA_SetMods, { 0x05, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00 } },
    {        XkbSA_SetMods, { 0x05, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00 } },
    {        XkbSA_SetMods, { 0x05, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00 } },
    {        XkbSA_SetMods, { 0x05, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00 } }
};
static unsigned short	keyActions[NUM_KEYS]= {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  6,
     8,  0, 10, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31,  0, 33,
    35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57,  0,  0,  0, 59,
    61,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 63,  0,  0,
    65, 67,  0, 69, 70,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
};
static XkbBehavior behaviors[NUM_KEYS]= {
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 },
    {   0,    0 }, {   0,    0 }, {   0,    0 }, {   0,    0 }
};
static unsigned char explicit_parts[NUM_KEYS]= {
       0,    0,    0,    0,    0,    0,    0,    0,
       0,    0, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,    0,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01,    0,    0, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01,    0, 0x01, 0x01, 0x01,
    0x01, 0x01,    0, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01,    0, 0x01, 0x01, 0x01, 0x01,    0, 0x01,
       0,    0,    0, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01,    0,    0,    0,
       0,    0, 0x01,    0,    0,    0, 0x01,    0,
       0,    0,    0,    0, 0x01,    0, 0x01, 0x01,
    0x01,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0, 0x01, 0x01,
    0x01, 0x01, 0x01,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0,
       0,    0,    0,    0,    0,    0,    0,    0
};
static unsigned short vmodmap[NUM_KEYS]= {
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
    0x0002,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0, 0x0001,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0, 0x0004,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0,      0,
         0,      0,      0,      0,      0,      0,      0};
static XkbServerMapRec serverMap= {
    72, 72, (XkbAction *)actionCache,
    behaviors, keyActions, explicit_parts,
    {  16,   8, 128,   0,   0,   0,   0,   0,
        0,   0,   0,   0,   0,   0,   0,   0 },
    vmodmap
};

/* compat name is "complete" */
static XkbSymInterpretRec dfltSI[92]= {
    {    XK_ISO_Level2_Latch, 0x0000,
         XkbSI_LevelOneOnly|XkbSI_Exactly, ShiftMask,
         255,
       {      XkbSA_LatchMods, { 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_Shift_Lock, 0x0000,
         XkbSI_AnyOf, ShiftMask|LockMask,
         255,
       {       XkbSA_LockMods, { 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_Num_Lock, 0x0000,
         XkbSI_AnyOf, 0xff,
         0,
       {       XkbSA_LockMods, { 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00 } } },
    {    XK_ISO_Lock, 0x0000,
         XkbSI_AnyOf, 0xff,
         255,
       {        XkbSA_ISOLock, { 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_ISO_Level3_Shift, 0x0000,
         XkbSI_AnyOf, 0xff,
         2,
       {        XkbSA_SetMods, { 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00 } } },
    {    XK_ISO_Level3_Latch, 0x0000,
         XkbSI_LevelOneOnly|XkbSI_AnyOf, 0xff,
         2,
       {      XkbSA_LatchMods, { 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00 } } },
    {    XK_ISO_Level3_Lock, 0x0000,
         XkbSI_LevelOneOnly|XkbSI_AnyOf, 0xff,
         2,
       {       XkbSA_LockMods, { 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00 } } },
    {    XK_Alt_L, 0x0000,
         XkbSI_AnyOf, 0xff,
         1,
       {        XkbSA_SetMods, { 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_Alt_R, 0x0000,
         XkbSI_AnyOf, 0xff,
         255,
       {        XkbSA_SetMods, { 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00 } } },
    {    XK_Scroll_Lock, 0x0000,
         XkbSI_AnyOf, 0xff,
         4,
       {       XkbSA_LockMods, { 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_Mode_switch, 0x0000,
         XkbSI_LevelOneOnly|XkbSI_AnyOfOrNone, 0xff,
         3,
       {       XkbSA_SetGroup, { 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_ISO_Group_Latch, 0x0000,
         XkbSI_LevelOneOnly|XkbSI_AnyOfOrNone, 0xff,
         3,
       {     XkbSA_LatchGroup, { 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_ISO_Next_Group, 0x0000,
         XkbSI_LevelOneOnly|XkbSI_AnyOfOrNone, 0xff,
         3,
       {      XkbSA_LockGroup, { 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_ISO_Prev_Group, 0x0000,
         XkbSI_LevelOneOnly|XkbSI_AnyOfOrNone, 0xff,
         3,
       {      XkbSA_LockGroup, { 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_ISO_First_Group, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {      XkbSA_LockGroup, { 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_ISO_Last_Group, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {      XkbSA_LockGroup, { 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_KP_1, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {        XkbSA_MovePtr, { 0x00, 0xff, 0xff, 0x00, 0x01, 0x00, 0x00 } } },
    {    XK_KP_End, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {        XkbSA_MovePtr, { 0x00, 0xff, 0xff, 0x00, 0x01, 0x00, 0x00 } } },
    {    XK_KP_2, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {        XkbSA_MovePtr, { 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00 } } },
    {    XK_KP_Down, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {        XkbSA_MovePtr, { 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00 } } },
    {    XK_KP_3, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {        XkbSA_MovePtr, { 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00 } } },
    {    XK_KP_Next, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {        XkbSA_MovePtr, { 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00 } } },
    {    XK_KP_4, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {        XkbSA_MovePtr, { 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_KP_Left, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {        XkbSA_MovePtr, { 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_KP_6, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {        XkbSA_MovePtr, { 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_KP_Right, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {        XkbSA_MovePtr, { 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_KP_7, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {        XkbSA_MovePtr, { 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00 } } },
    {    XK_KP_Home, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {        XkbSA_MovePtr, { 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00 } } },
    {    XK_KP_8, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {        XkbSA_MovePtr, { 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00 } } },
    {    XK_KP_Up, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {        XkbSA_MovePtr, { 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00 } } },
    {    XK_KP_9, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {        XkbSA_MovePtr, { 0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00 } } },
    {    XK_KP_Prior, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {        XkbSA_MovePtr, { 0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x00 } } },
    {    XK_KP_5, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {         XkbSA_PtrBtn, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_KP_Begin, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {         XkbSA_PtrBtn, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_KP_F2, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {     XkbSA_SetPtrDflt, { 0x04, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_KP_Divide, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {     XkbSA_SetPtrDflt, { 0x04, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_KP_F3, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {     XkbSA_SetPtrDflt, { 0x04, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_KP_Multiply, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {     XkbSA_SetPtrDflt, { 0x04, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_KP_F4, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {     XkbSA_SetPtrDflt, { 0x04, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_KP_Subtract, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {     XkbSA_SetPtrDflt, { 0x04, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_KP_Separator, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {         XkbSA_PtrBtn, { 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_KP_Add, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {         XkbSA_PtrBtn, { 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_KP_0, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {     XkbSA_LockPtrBtn, { 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_KP_Insert, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {     XkbSA_LockPtrBtn, { 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_KP_Decimal, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {     XkbSA_LockPtrBtn, { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_KP_Delete, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {     XkbSA_LockPtrBtn, { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_Pointer_Button_Dflt, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {         XkbSA_PtrBtn, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_Pointer_Button1, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {         XkbSA_PtrBtn, { 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_Pointer_Button2, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {         XkbSA_PtrBtn, { 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_Pointer_Button3, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {         XkbSA_PtrBtn, { 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_Pointer_DblClick_Dflt, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {         XkbSA_PtrBtn, { 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_Pointer_DblClick1, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {         XkbSA_PtrBtn, { 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_Pointer_DblClick2, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {         XkbSA_PtrBtn, { 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_Pointer_DblClick3, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {         XkbSA_PtrBtn, { 0x00, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_Pointer_Drag_Dflt, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {     XkbSA_LockPtrBtn, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_Pointer_Drag1, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {     XkbSA_LockPtrBtn, { 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_Pointer_Drag2, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {     XkbSA_LockPtrBtn, { 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_Pointer_Drag3, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {     XkbSA_LockPtrBtn, { 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_Pointer_EnableKeys, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_LockControls, { 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00 } } },
    {    XK_Pointer_Accelerate, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_LockControls, { 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00 } } },
    {    XK_Pointer_DfltBtnNext, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {     XkbSA_SetPtrDflt, { 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_Pointer_DfltBtnPrev, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {     XkbSA_SetPtrDflt, { 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_AccessX_Enable, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_LockControls, { 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00 } } },
    {    XK_AccessX_Feedback_Enable, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_LockControls, { 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00 } } },
    {    XK_RepeatKeys_Enable, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_LockControls, { 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00 } } },
    {    XK_SlowKeys_Enable, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_LockControls, { 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00 } } },
    {    XK_BounceKeys_Enable, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_LockControls, { 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00 } } },
    {    XK_StickyKeys_Enable, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_LockControls, { 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00 } } },
    {    XK_MouseKeys_Enable, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_LockControls, { 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00 } } },
    {    XK_MouseKeys_Accel_Enable, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_LockControls, { 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00 } } },
    {    XK_Overlay1_Enable, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_LockControls, { 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00 } } },
    {    XK_Overlay2_Enable, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_LockControls, { 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00 } } },
    {    XK_AudibleBell_Enable, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_LockControls, { 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00 } } },
    {    XK_Terminate_Server, 0x0000,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {      XkbSA_Terminate, { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_XF86_Switch_VT_1, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_SwitchScreen, { 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_XF86_Switch_VT_2, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_SwitchScreen, { 0x05, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_XF86_Switch_VT_3, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_SwitchScreen, { 0x05, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_XF86_Switch_VT_4, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_SwitchScreen, { 0x05, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_XF86_Switch_VT_5, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_SwitchScreen, { 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_XF86_Switch_VT_6, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_SwitchScreen, { 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_XF86_Switch_VT_7, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_SwitchScreen, { 0x05, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_XF86_Switch_VT_8, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_SwitchScreen, { 0x05, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_XF86_Switch_VT_9, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_SwitchScreen, { 0x05, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_XF86_Switch_VT_10, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_SwitchScreen, { 0x05, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_XF86_Switch_VT_11, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_SwitchScreen, { 0x05, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_XF86_Switch_VT_12, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {   XkbSA_SwitchScreen, { 0x05, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00 } } },
    {    XK_XF86_Ungrab, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {              Private, { 0x55, 0x6e, 0x67, 0x72, 0x61, 0x62, 0x00 } } },
    {    XK_XF86_ClearGrab, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {              Private, { 0x43, 0x6c, 0x73, 0x47, 0x72, 0x62, 0x00 } } },
    {    XK_XF86_Next_VMode, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {              Private, { 0x2b, 0x56, 0x4d, 0x6f, 0x64, 0x65, 0x00 } } },
    {    XK_XF86_Prev_VMode, 0x0001,
         XkbSI_AnyOfOrNone, 0xff,
         255,
       {              Private, { 0x2d, 0x56, 0x4d, 0x6f, 0x64, 0x65, 0x00 } } },
    {    NoSymbol, 0x0000,
         XkbSI_Exactly, LockMask,
         255,
       {       XkbSA_LockMods, { 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00 } } },
    {    NoSymbol, 0x0000,
         XkbSI_AnyOf, 0xff,
         255,
       {        XkbSA_SetMods, { 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } } }
};
#define num_dfltSI (sizeof(dfltSI)/sizeof(XkbSymInterpretRec))

static XkbCompatMapRec compatMap= {
    dfltSI,
    {   /* group compatibility */
        {            0,            0,            0 },
        {            0,            0, vmod_AltGrMask },
        {            0,            0, vmod_AltGrMask },
        {            0,            0, vmod_AltGrMask }
    },
    num_dfltSI, num_dfltSI
};

static XkbIndicatorRec indicators= {
    0x7,
    {
        { 0x80, 0, 0x00, XkbIM_UseLocked, { LockMask,  LockMask, 0 }, 0 },
        { 0x80, 0, 0x00, XkbIM_UseLocked, { Mod2Mask,  0, vmod_NumLockMask }, 0 },
        { 0x00, 0, 0x00, XkbIM_UseLocked, { 0,  0, vmod_ScrollLockMask }, 0 },
        { 0x80, 0, 0x00, XkbIM_UseLocked, { ShiftMask,  ShiftMask, 0 }, 0 },
        { 0x80, XkbIM_UseEffective, 0xfe, 0, { 0,  0, 0 }, 0 },
        { 0x20, 0, 0x00, 0, { 0,  0, 0 }, XkbMouseKeysMask },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 },
        { 0x00, 0, 0x00, 0, { 0,  0, 0 }, 0 }
    }
};
static void
#if NeedFunctionPrototypes
initIndicatorNames(DPYTYPE dpy,XkbDescPtr xkb)
#else
initIndicatorNames(dpy,xkb)
    DPYTYPE dpy;
    XkbDescPtr xkb;
#endif
{
    xkb->names->indicators[ 0]=	GET_ATOM(dpy,"Caps_Lock");
    xkb->names->indicators[ 1]=	GET_ATOM(dpy,"Num_Lock");
    xkb->names->indicators[ 2]=	GET_ATOM(dpy,"Scroll_Lock");
    xkb->names->indicators[ 3]=	GET_ATOM(dpy,"Shift_Lock");
    xkb->names->indicators[ 4]=	GET_ATOM(dpy,"Group_2");
    xkb->names->indicators[ 5]=	GET_ATOM(dpy,"Mouse_Keys");
}

static XkbPropertyRec g_props[1]= {
	{	"description", "Generic 102"	}
};

static XkbColorRec g_colors[6]= {
	{	  0, "black"	},
	{	  1, "white"	},
	{	  2, "grey20"	},
	{	  3, "grey10"	},
	{	  4, "green"	},
	{	  5, "green30"	}
};

static XkbPointRec pts_sh00o00[]= {
	{  180,  180 }
};
static XkbPointRec pts_sh00o01[]= {
	{   20,   10 }, {  160,  160 }
};

static XkbOutlineRec ol_sh00[]= {
	{ 1,	1,	10,	pts_sh00o00	},
	{ 2,	2,	10,	pts_sh00o01	}
};

static XkbPointRec pts_sh01o00[]= {
	{  380,  180 }
};
static XkbPointRec pts_sh01o01[]= {
	{   20,   10 }, {  360,  160 }
};

static XkbOutlineRec ol_sh01[]= {
	{ 1,	1,	10,	pts_sh01o00	},
	{ 2,	2,	10,	pts_sh01o01	}
};

static XkbPointRec pts_sh02o00[]= {
	{  280,  180 }
};
static XkbPointRec pts_sh02o01[]= {
	{   20,   10 }, {  260,  160 }
};

static XkbOutlineRec ol_sh02[]= {
	{ 1,	1,	10,	pts_sh02o00	},
	{ 2,	2,	10,	pts_sh02o01	}
};

static XkbPointRec pts_sh03o00[]= {
	{  280,  180 }
};
static XkbPointRec pts_sh03o01[]= {
	{   20,   10 }, {  260,  160 }
};

static XkbOutlineRec ol_sh03[]= {
	{ 1,	1,	10,	pts_sh03o00	},
	{ 2,	2,	10,	pts_sh03o01	}
};

static XkbPointRec pts_sh04o00[]= {
	{  160,    0 }, {  430,    0 }, {  430,  370 }, {   20,  370 },
	{   20,  190 }, {  160,  190 }
};
static XkbPointRec pts_sh04o01[]= {
	{  180,   10 }, {  410,   10 }, {  410,  360 }, {   40,  360 },
	{   40,  200 }, {  180,  200 }
};

static XkbOutlineRec ol_sh04[]= {
	{ 6,	6,	10,	pts_sh04o00	},
	{ 6,	6,	10,	pts_sh04o01	}
};

static XkbPointRec pts_sh05o00[]= {
	{  330,  180 }
};
static XkbPointRec pts_sh05o01[]= {
	{   20,   10 }, {  310,  160 }
};

static XkbOutlineRec ol_sh05[]= {
	{ 1,	1,	10,	pts_sh05o00	},
	{ 2,	2,	10,	pts_sh05o01	}
};

static XkbPointRec pts_sh06o00[]= {
	{  250,  180 }
};
static XkbPointRec pts_sh06o01[]= {
	{   20,   10 }, {  230,  160 }
};

static XkbOutlineRec ol_sh06[]= {
	{ 1,	1,	10,	pts_sh06o00	},
	{ 2,	2,	10,	pts_sh06o01	}
};

static XkbPointRec pts_sh07o00[]= {
	{  490,  180 }
};
static XkbPointRec pts_sh07o01[]= {
	{   20,   10 }, {  470,  160 }
};

static XkbOutlineRec ol_sh07[]= {
	{ 1,	1,	10,	pts_sh07o00	},
	{ 2,	2,	10,	pts_sh07o01	}
};

static XkbPointRec pts_sh08o00[]= {
	{  270,  180 }
};
static XkbPointRec pts_sh08o01[]= {
	{   20,   10 }, {  250,  160 }
};

static XkbOutlineRec ol_sh08[]= {
	{ 1,	1,	10,	pts_sh08o00	},
	{ 2,	2,	10,	pts_sh08o01	}
};

static XkbPointRec pts_sh09o00[]= {
	{ 1340,  180 }
};
static XkbPointRec pts_sh09o01[]= {
	{   20,   10 }, { 1320,  160 }
};

static XkbOutlineRec ol_sh09[]= {
	{ 1,	1,	10,	pts_sh09o00	},
	{ 2,	2,	10,	pts_sh09o01	}
};

static XkbPointRec pts_sh10o00[]= {
	{  370,  180 }
};
static XkbPointRec pts_sh10o01[]= {
	{   20,   10 }, {  350,  160 }
};

static XkbOutlineRec ol_sh10[]= {
	{ 1,	1,	10,	pts_sh10o00	},
	{ 2,	2,	10,	pts_sh10o01	}
};

static XkbPointRec pts_sh11o00[]= {
	{  180,  370 }
};
static XkbPointRec pts_sh11o01[]= {
	{   20,   10 }, {  160,  350 }
};

static XkbOutlineRec ol_sh11[]= {
	{ 1,	1,	10,	pts_sh11o00	},
	{ 2,	2,	10,	pts_sh11o01	}
};

static XkbPointRec pts_sh12o00[]= {
	{  750,  200 }
};

static XkbOutlineRec ol_sh12[]= {
	{ 1,	1,	0,	pts_sh12o00	}
};

static XkbPointRec pts_sh13o00[]= {
	{   50,   10 }
};

static XkbOutlineRec ol_sh13[]= {
	{ 1,	1,	0,	pts_sh13o00	}
};


static XkbShapeRec g_shapes[14]= {
	{ None,   2,   2, ol_sh00,         NULL,	        NULL,
					{   20,   10,  180,  180 } },
	{ None,   2,   2, ol_sh01,         NULL,	        NULL,
					{   20,   10,  380,  180 } },
	{ None,   2,   2, ol_sh02,         NULL,	        NULL,
					{   20,   10,  280,  180 } },
	{ None,   2,   2, ol_sh03,         NULL,	        NULL,
					{   20,   10,  280,  180 } },
	{ None,   2,   2, ol_sh04,         NULL,	        NULL,
					{   20,    0,  430,  370 } },
	{ None,   2,   2, ol_sh05,         NULL,	        NULL,
					{   20,   10,  330,  180 } },
	{ None,   2,   2, ol_sh06,         NULL,	        NULL,
					{   20,   10,  250,  180 } },
	{ None,   2,   2, ol_sh07,         NULL,	        NULL,
					{   20,   10,  490,  180 } },
	{ None,   2,   2, ol_sh08,         NULL,	        NULL,
					{   20,   10,  270,  180 } },
	{ None,   2,   2, ol_sh09,         NULL,	        NULL,
					{   20,   10, 1340,  180 } },
	{ None,   2,   2, ol_sh10,         NULL,	        NULL,
					{   20,   10,  370,  180 } },
	{ None,   2,   2, ol_sh11,         NULL,	        NULL,
					{   20,   10,  180,  370 } },
	{ None,   1,   1, ol_sh12,         NULL,	        NULL,
					{  750,  200,  750,  200 } },
	{ None,   1,   1, ol_sh13,         NULL,	        NULL,
					{   50,   10,   50,   10 } }
};
static XkbKeyRec keys_s00r00[]= {
	{ { "ESC" },	  10,    2,    2 },
	{ { "FK01" },	 100,    0,    1 },
	{ { "FK02" },	  10,    0,    1 },
	{ { "FK03" },	  10,    0,    1 },
	{ { "FK04" },	  10,    0,    1 },
	{ { "FK05" },	 110,    0,    1 },
	{ { "FK06" },	  10,    0,    1 },
	{ { "FK07" },	  10,    0,    1 },
	{ { "FK08" },	  10,    0,    1 },
	{ { "FK09" },	 110,    0,    1 },
	{ { "FK10" },	  10,    0,    1 },
	{ { "FK11" },	  10,    0,    1 },
	{ { "FK12" },	  10,    0,    1 },
	{ { "PRSC" },	  80,    0,    1 },
	{ { "SCLK" },	  10,    0,    1 },
	{ { "PAUS" },	  10,    0,    1 }
};
static XkbRowRec rows_s00[]= {
	{   10,   10, 16, 16, 0, keys_s00r00,  {    0,    0,    0,    0 } }
};
static XkbKeyRec keys_s01r00[]= {
	{ { "TLDE" },	  10,    0,    1 },
	{ { "AE01" },	  10,    0,    1 },
	{ { "AE02" },	  10,    0,    1 },
	{ { "AE03" },	  10,    0,    1 },
	{ { "AE04" },	  10,    0,    1 },
	{ { "AE05" },	  10,    0,    1 },
	{ { "AE06" },	  10,    0,    1 },
	{ { "AE07" },	  10,    0,    1 },
	{ { "AE08" },	  10,    0,    1 },
	{ { "AE09" },	  10,    0,    1 },
	{ { "AE10" },	  10,    0,    1 },
	{ { "AE11" },	  10,    0,    1 },
	{ { "AE12" },	  10,    0,    1 },
	{ { "BKSL" },	  10,    0,    1 },
	{ { "BKSP" },	  10,    0,    2 }
};
static XkbKeyRec keys_s01r01[]= {
	{ { "TAB" },	  10,    2,    2 },
	{ { "AD01" },	  10,    0,    1 },
	{ { "AD02" },	  10,    0,    1 },
	{ { "AD03" },	  10,    0,    1 },
	{ { "AD04" },	  10,    0,    1 },
	{ { "AD05" },	  10,    0,    1 },
	{ { "AD06" },	  10,    0,    1 },
	{ { "AD07" },	  10,    0,    1 },
	{ { "AD08" },	  10,    0,    1 },
	{ { "AD09" },	  10,    0,    1 },
	{ { "AD10" },	  10,    0,    1 },
	{ { "AD11" },	  10,    0,    1 },
	{ { "AD12" },	  10,    0,    1 },
	{ { "RTRN" },	-150,    4,    2 }
};
static XkbKeyRec keys_s01r02[]= {
	{ { "CAPS" },	  10,    5,    2 },
	{ { "AC01" },	  10,    0,    1 },
	{ { "AC02" },	  10,    0,    1 },
	{ { "AC03" },	  10,    0,    1 },
	{ { "AC04" },	  10,    0,    1 },
	{ { "AC05" },	  10,    0,    1 },
	{ { "AC06" },	  10,    0,    1 },
	{ { "AC07" },	  10,    0,    1 },
	{ { "AC08" },	  10,    0,    1 },
	{ { "AC09" },	  10,    0,    1 },
	{ { "AC10" },	  10,    0,    1 },
	{ { "AC11" },	  10,    0,    1 }
};
static XkbKeyRec keys_s01r03[]= {
	{ { "LFSH" },	  10,    6,    2 },
	{ { "LSGT" },	  10,    0,    1 },
	{ { "AB01" },	  10,    0,    1 },
	{ { "AB02" },	  10,    0,    1 },
	{ { "AB03" },	  10,    0,    1 },
	{ { "AB04" },	  10,    0,    1 },
	{ { "AB05" },	  10,    0,    1 },
	{ { "AB06" },	  10,    0,    1 },
	{ { "AB07" },	  10,    0,    1 },
	{ { "AB08" },	  10,    0,    1 },
	{ { "AB09" },	  10,    0,    1 },
	{ { "AB10" },	  10,    0,    1 },
	{ { "RTSH" },	  10,    7,    2 }
};
static XkbKeyRec keys_s01r04[]= {
	{ { "LCTL" },	  10,    8,    2 },
	{ { "LALT" },	 200,    8,    2 },
	{ { "SPCE" },	  10,    9,    1 },
	{ { "RALT" },	  10,    8,    2 },
	{ { "RCTL" },	 200,    8,    2 }
};
static XkbRowRec rows_s01[]= {
	{   10,   10, 15, 15, 0, keys_s01r00,  {    0,    0,    0,    0 } },
	{  200,   10, 14, 14, 0, keys_s01r01,  {    0,    0,    0,    0 } },
	{  390,   10, 12, 12, 0, keys_s01r02,  {    0,    0,    0,    0 } },
	{  580,   10, 13, 13, 0, keys_s01r03,  {    0,    0,    0,    0 } },
	{  770,   10,  5,  5, 0, keys_s01r04,  {    0,    0,    0,    0 } }
};
static XkbKeyRec keys_s02r00[]= {
	{ { "INS" },	  10,    0,    2 },
	{ { "HOME" },	  10,    0,    2 },
	{ { "PGUP" },	  10,    0,    2 }
};
static XkbKeyRec keys_s02r01[]= {
	{ { "DELE" },	  10,    0,    2 },
	{ { "END" },	  10,    0,    2 },
	{ { "PGDN" },	  10,    0,    2 }
};
static XkbKeyRec keys_s02r02[]= {
	{ { "UP" },	  10,    0,    2 }
};
static XkbKeyRec keys_s02r03[]= {
	{ { "LEFT" },	  10,    0,    2 },
	{ { "DOWN" },	  10,    0,    2 },
	{ { "RGHT" },	  10,    0,    2 }
};
static XkbRowRec rows_s02[]= {
	{   10,   10,  3,  3, 0, keys_s02r00,  {    0,    0,    0,    0 } },
	{  200,   10,  3,  3, 0, keys_s02r01,  {    0,    0,    0,    0 } },
	{  580,  200,  1,  1, 0, keys_s02r02,  {    0,    0,    0,    0 } },
	{  770,   10,  3,  3, 0, keys_s02r03,  {    0,    0,    0,    0 } }
};
static XkbKeyRec keys_s03r00[]= {
	{ { "NMLK" },	  10,    0,    2 },
	{ { "KPDV" },	  10,    0,    2 },
	{ { "KPMU" },	  10,    0,    2 },
	{ { "KPSU" },	  10,    0,    2 }
};
static XkbKeyRec keys_s03r01[]= {
	{ { "KP7" },	  10,    0,    1 },
	{ { "KP8" },	  10,    0,    1 },
	{ { "KP9" },	  10,    0,    1 },
	{ { "KPAD" },	  10,   11,    2 }
};
static XkbKeyRec keys_s03r02[]= {
	{ { "KP4" },	  10,    0,    1 },
	{ { "KP5" },	  10,    0,    1 },
	{ { "KP6" },	  10,    0,    1 }
};
static XkbKeyRec keys_s03r03[]= {
	{ { "KP1" },	  10,    0,    1 },
	{ { "KP2" },	  10,    0,    1 },
	{ { "KP3" },	  10,    0,    1 },
	{ { "KPEN" },	  10,   11,    2 }
};
static XkbKeyRec keys_s03r04[]= {
	{ { "KP0" },	  10,   10,    1 },
	{ { "KPDL" },	  10,    0,    1 }
};
static XkbRowRec rows_s03[]= {
	{   10,   10,  4,  4, 0, keys_s03r00,  {    0,    0,    0,    0 } },
	{  200,   10,  4,  4, 0, keys_s03r01,  {    0,    0,    0,    0 } },
	{  390,   10,  3,  3, 0, keys_s03r02,  {    0,    0,    0,    0 } },
	{  580,   10,  4,  4, 0, keys_s03r03,  {    0,    0,    0,    0 } },
	{  770,   10,  2,  2, 0, keys_s03r04,  {    0,    0,    0,    0 } }
};

static XkbSectionRec g_sections[4]= {
	{
	    None, /* name */
	       7, /* priority */
	     520, /* top */
	     190, /* left */
	    3510, /* width */
	     190, /* height */
	       0, /* angle */
	       1, /* num_rows */
	       0, /* num_doodads */
	       0, /* num_overlays */
	       1, /* sz_rows */
	       0, /* sz_doodads */
	       0, /* sz_overlays */
	    rows_s00,
	    NULL, /* doodads */
	    {    0,    0,    0,    0 }, /* bounds */
	    NULL /* overlays */
	},
	{
	    None, /* name */
	       8, /* priority */
	     910, /* top */
	     190, /* left */
	    2860, /* width */
	     950, /* height */
	       0, /* angle */
	       5, /* num_rows */
	       0, /* num_doodads */
	       0, /* num_overlays */
	       5, /* sz_rows */
	       0, /* sz_doodads */
	       0, /* sz_overlays */
	    rows_s01,
	    NULL, /* doodads */
	    {    0,    0,    0,    0 }, /* bounds */
	    NULL /* overlays */
	},
	{
	    None, /* name */
	       9, /* priority */
	     910, /* top */
	    3120, /* left */
	     580, /* width */
	     950, /* height */
	       0, /* angle */
	       4, /* num_rows */
	       0, /* num_doodads */
	       0, /* num_overlays */
	       4, /* sz_rows */
	       0, /* sz_doodads */
	       0, /* sz_overlays */
	    rows_s02,
	    NULL, /* doodads */
	    {    0,    0,    0,    0 }, /* bounds */
	    NULL /* overlays */
	},
	{
	    None, /* name */
	      10, /* priority */
	     910, /* top */
	    3760, /* left */
	     770, /* width */
	     950, /* height */
	       0, /* angle */
	       5, /* num_rows */
	       0, /* num_doodads */
	       0, /* num_overlays */
	       5, /* sz_rows */
	       0, /* sz_doodads */
	       0, /* sz_overlays */
	    rows_s03,
	    NULL, /* doodads */
	    {    0,    0,    0,    0 }, /* bounds */
	    NULL /* overlays */
	}
};

static Bool
#if NeedFunctionPrototypes
_InitSections(DPYTYPE dpy,XkbGeometryPtr geom)
#else
_InitSections(dpy,geom)
    DPYTYPE		dpy;
	XkbGeometryPtr	geom;
#endif
{
XkbSectionPtr	sections;

    sections= geom->sections;
}
static XkbDoodadRec g_doodads[7];
static void
#if NeedFunctionPrototypes
_InitGeomDoodads(DPYTYPE dpy,XkbGeometryPtr geom)
#else
_InitGeomDoodads(dpy,geom)
    DPYTYPE		dpy;
    XkbGeometryPtr	geom;
#endif
{
register XkbDoodadPtr doodads;

    doodads= geom->doodads;
    doodads[0].any.name= GET_ATOM(dpy,"LedPanel");
    doodads[0].any.type= XkbSolidDoodad;
    doodads[0].any.priority= 0;
    doodads[0].any.top= 520;
    doodads[0].any.left= 3770;
    doodads[0].any.angle= 0;
    doodads[0].shape.color_ndx= 3;
    doodads[0].shape.shape_ndx= 12;

    doodads[1].any.name= GET_ATOM(dpy,"NumLock");
    doodads[1].any.type= XkbIndicatorDoodad;
    doodads[1].any.priority= 1;
    doodads[1].any.top= 670;
    doodads[1].any.left= 3820;
    doodads[1].any.angle= 0;
    doodads[1].indicator.shape_ndx= 13;
    doodads[1].indicator.on_color_ndx= 4;
    doodads[1].indicator.off_color_ndx= 5;

    doodads[2].any.name= GET_ATOM(dpy,"CapsLock");
    doodads[2].any.type= XkbIndicatorDoodad;
    doodads[2].any.priority= 2;
    doodads[2].any.top= 670;
    doodads[2].any.left= 4070;
    doodads[2].any.angle= 0;
    doodads[2].indicator.shape_ndx= 13;
    doodads[2].indicator.on_color_ndx= 4;
    doodads[2].indicator.off_color_ndx= 5;

    doodads[3].any.name= GET_ATOM(dpy,"ScrollLock");
    doodads[3].any.type= XkbIndicatorDoodad;
    doodads[3].any.priority= 3;
    doodads[3].any.top= 670;
    doodads[3].any.left= 4330;
    doodads[3].any.angle= 0;
    doodads[3].indicator.shape_ndx= 13;
    doodads[3].indicator.on_color_ndx= 4;
    doodads[3].indicator.off_color_ndx= 5;

    doodads[4].any.name= GET_ATOM(dpy,"NumLockLabel");
    doodads[4].any.type= XkbTextDoodad;
    doodads[4].any.priority= 4;
    doodads[4].any.top= 550;
    doodads[4].any.left= 3780;
    doodads[4].any.angle= 0;
    doodads[4].text.width= 198;
    doodads[4].text.height= 100;
    doodads[4].text.color_ndx= 0;
    doodads[4].text.text= "Num\nLock";
    doodads[4].text.font= "-*-helvetica-medium-r-normal--*-120-*-*-*-*-iso8859-1";

    doodads[5].any.name= GET_ATOM(dpy,"CapsLockLabel");
    doodads[5].any.type= XkbTextDoodad;
    doodads[5].any.priority= 5;
    doodads[5].any.top= 550;
    doodads[5].any.left= 4030;
    doodads[5].any.angle= 0;
    doodads[5].text.width= 264;
    doodads[5].text.height= 100;
    doodads[5].text.color_ndx= 0;
    doodads[5].text.text= "Caps\nLock";
    doodads[5].text.font= "-*-helvetica-medium-r-normal--*-120-*-*-*-*-iso8859-1";

    doodads[6].any.name= GET_ATOM(dpy,"ScrollLockLabel");
    doodads[6].any.type= XkbTextDoodad;
    doodads[6].any.priority= 6;
    doodads[6].any.top= 550;
    doodads[6].any.left= 4280;
    doodads[6].any.angle= 0;
    doodads[6].text.width= 396;
    doodads[6].text.height= 100;
    doodads[6].text.color_ndx= 0;
    doodads[6].text.text= "Scroll\nLock";
    doodads[6].text.font= "-*-helvetica-medium-r-normal--*-120-*-*-*-*-iso8859-1";
}

static XkbKeyAliasRec g_aliases[2]= {
	{	"CAPS", "AC00"	},
	{	"LCTL", "AA00"	}
};

static XkbGeometryRec	geom= {
	None,			/* name */
	4700, 2100,		/* width, height */
	"-*-helvetica-medium-r-normal--*-120-*-*-*-*-iso8859-1",/* label font */
	&g_colors[0],		/* label color */
	&g_colors[1],		/* base color */
	1,	6,	14,	/*  sz: props, colors, shapes */
	4,	7,	2,	/*  sz: sections, doodads, aliases */
	1,	6,	14,	/* num: props, colors, shapes */
	4,	7,	2,	/* num: sections, doodads, aliases */
	g_props,	g_colors,	g_shapes,
	g_sections,	g_doodads,	g_aliases
};

static Bool
#if NeedFunctionPrototypes
_InitHdrGeom(DPYTYPE dpy,XkbGeometryPtr geom)
#else
_InitHdrGeom(dpy,geom)
    DPYTYPE		dpy;
	XkbGeometryPtr	geom;
#endif
{
    geom->name= GET_ATOM(dpy,"pc_pc102_");
    geom->shapes[ 0].name= GET_ATOM(dpy,"NORM");
    geom->shapes[ 1].name= GET_ATOM(dpy,"BKSP");
    geom->shapes[ 2].name= GET_ATOM(dpy,"TABK");
    geom->shapes[ 3].name= GET_ATOM(dpy,"BKSL");
    geom->shapes[ 4].name= GET_ATOM(dpy,"RTRN");
    geom->shapes[ 5].name= GET_ATOM(dpy,"CAPS");
    geom->shapes[ 6].name= GET_ATOM(dpy,"LFSH");
    geom->shapes[ 7].name= GET_ATOM(dpy,"RTSH");
    geom->shapes[ 8].name= GET_ATOM(dpy,"MODK");
    geom->shapes[ 9].name= GET_ATOM(dpy,"SPCE");
    geom->shapes[10].name= GET_ATOM(dpy,"KP0");
    geom->shapes[11].name= GET_ATOM(dpy,"KPAD");
    geom->shapes[12].name= GET_ATOM(dpy,"LEDS");
    geom->shapes[13].name= GET_ATOM(dpy,"LED");
    _InitGeomDoodads(dpy,geom);
    _InitSections(dpy,geom);
}

#endif /* PCKEY */
